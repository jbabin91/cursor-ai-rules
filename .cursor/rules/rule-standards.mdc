---
description: Standards for creating and maintaining Cursor AI rules
globs: [".cursor/rules/*.mdc"]
---

# Cursor AI Rule Standards

## File Organization

### Directory Structure

```sh
.cursor/rules/
├── rule-standards.mdc     # Core standards for all rules
├── validation-rules.mdc   # Rules for validating other rules
│
├── core/                  # Core rules that affect all code
│   ├── formatting/       # Code formatting rules
│   ├── naming/          # Naming conventions
│   ├── security/        # Security standards
│   └── testing/         # Testing requirements
│
├── languages/            # Language-specific rules
│   ├── typescript/
│   │   ├── style/      # TS style guides
│   │   └── patterns/   # TS patterns and best practices
│   ├── python/
│   └── rust/
│
├── frameworks/           # Framework-specific rules
│   ├── react/
│   │   ├── components/ # Component guidelines
│   │   └── hooks/      # Hook usage rules
│   ├── next/
│   └── node/
│
├── tools/                # Tool-specific rules
│   ├── git/            # Git workflow rules
│   ├── docker/         # Container guidelines
│   └── ci/             # CI/CD standards
│
└── project/             # Project-specific overrides
    ├── architecture/   # Architecture decisions
    ├── conventions/    # Project conventions
    └── workflows/      # Project workflows
```

### Rule Loading Order

The order in which rules are applied is determined by their glob patterns, not their directory location. To control rule precedence:

1. **Core Standards**

   ```yaml
   # rule-standards.mdc
   globs: [".cursor/rules/*.mdc"]  # Applies to all rule files
   ```

2. **Validation Rules**

   ```yaml
   # validation-rules.mdc
   globs: [".cursor/rules/**/*.mdc"]  # Applies to all rules recursively
   ```

3. **Core Rules**

   ```yaml
   # Example: core/formatting/typescript-format.mdc
   globs: ["**/*.{ts,tsx}"]  # Applies to all TypeScript files
   ```

4. **Specific Rules**

   ```yaml
   # Example: project/conventions/api-rules.mdc
   globs: [
     "{src,app}/api/**/*.ts",      # Matches both src/api and app/api
     "apis/**/*.ts",               # Alternative API directory
     "**/api/**/*.ts"             # Any nested api directory
   ]
   ```

### Glob Pattern Guidelines

1. **Project Root Flexibility**
   - Use brace expansion for common root directories: `{src,app,lib}`
   - Use double-star patterns for depth-agnostic matches: `**/feature/**`
   - Avoid hardcoding specific root directories

2. **Common Pattern Examples**

```yaml
# Components anywhere in the project
globs: ["**/{components,Components}/**/*.{tsx,jsx}"]

# API routes in Next.js
globs: ["{src,app,pages}/api/**/*.ts"]

# Test files
globs: ["**/__tests__/**/*.{spec,test}.{ts,tsx}"]

# Configuration files
globs: ["{.,}*.config.{js,ts}"]
```

3. **Pattern Precedence**
   - More specific patterns take precedence
   - Multiple patterns are evaluated in order
   - Later patterns can override earlier ones

4. **Best Practices**
   - Start with broad patterns and refine as needed
   - Use arrays for multiple patterns
   - Document pattern choices in rule overview
   - Test patterns against different project structures

### Directory Naming Conventions

1. **Root Level**
   - Place core standards directly in root
   - Use clear, descriptive names
   - No special prefixes needed

2. **Subdirectories**
   - Use lowercase, kebab-case
   - Should be descriptive and specific
   - Group related rules together
   - Maximum depth of 3 levels

3. **Special Directories**
   - `core/`: Foundation rules that affect all code
   - `project/`: Always contains project-specific overrides

### Rule File Placement

1. **Rule Location Guidelines**
   - Place rules in most specific applicable directory
   - Avoid duplicate rules across directories
   - Use dependencies to reference shared rules

2. **Cross-Cutting Rules**
   - Place in `core/` if truly global
   - Use globs to target specific file types
   - Reference from other rules as needed

3. **Override Hierarchy**
   1. Project rules (highest precedence)
   2. Tool/Framework specific rules
   3. Language specific rules
   4. Core rules (lowest precedence)

### Naming Conventions

- Use kebab-case for all rule files
- Files must end with `.mdc` extension
- Names should be descriptive and indicate purpose
- Format: `{category}-{purpose}-rules.mdc`

Examples:

- `typescript-style-rules.mdc`
- `react-component-rules.mdc`
- `api-security-rules.mdc`

## Rule File Format

### Required Frontmatter


```yaml
---
description: Brief description of the rule's purpose
globs: ["**/*.{ts,tsx}"]  # Files this rule applies to
---
```

### Metadata Section

The metadata section should be the first section after the frontmatter, using a collapsible details block:

```markdown
<details>
<summary>Rule Metadata</summary>

- **Version**: 1.0.0
- **Created**: 2024-02-21
- **Updated**: 2024-02-21
- **Dependencies**:
  - rule-standards
  - typescript-style-rules
- **Tags**:
  - style
  - typescript
  - formatting
</details>
```

### Document Structure

1. Title (H1)
2. Metadata section (in collapsible block)
3. Overview section
4. Rule sections (H2)
5. Examples
6. References

### Markdown Guidelines

- Use ATX-style headers (`#` syntax)
- Code blocks must specify language
- Use tables for complex relationships
- Use blockquotes for important notes
- Use emoji sparingly and purposefully

## Validation Rules

### Cross-Reference Validation

- All internal links must be valid
- Referenced files must exist
- Referenced line numbers must be valid
- Referenced rules must exist

### Content Validation

- Must have all required sections
- Must follow frontmatter schema
- Must have valid glob patterns
- Must have proper markdown structure

## Rule Categories

### Global Rules

- Apply to entire codebase
- Have highest precedence
- Must be carefully reviewed
- Should be minimal

### File-Specific Rules

- Use precise glob patterns
- Include clear scope definition
- Document exceptions
- Include validation examples

## Version Control

### Git Guidelines

- Follow Conventional Commits specification
- One rule change per commit
- PR required for changes
- Changelog updates required using conventional-changelog
- Include affected rule files in commit scope

### Commit Message Format

```sh
<type>(<scope>): <description>

[optional body]

[optional footer]

BREAKING CHANGE: <description>
```

Types:

- `feat`: New feature or rule
- `fix`: Bug fix or rule correction
- `docs`: Documentation only changes
- `style`: Changes that don't affect meaning (whitespace, formatting)
- `refactor`: Code/rule change that neither fixes a bug nor adds a feature
- `
