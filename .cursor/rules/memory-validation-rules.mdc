---
description: Validation rules for AI memory management and quality assurance
globs: [".cursor/rules/CURSOR_MEMORY.mdc"]
---

<details>
<summary>Rule Metadata</summary>

- **Version**: 1.0.0
- **Created**: 2024-02-22
- **Updated**: 2024-02-22
- **Dependencies**:
  - cursor-global-rules
- **Tags**:
  - memory
  - validation
  - quality

</details>

# Memory Validation Rules

> Comprehensive validation rules for ensuring quality and consistency of AI memory management.

## Memory Entry Validation

### Structure Validation

```mermaid
Memory Entry Check
â”œâ”€â”€ Required Fields
â”‚   â”œâ”€â”€ Topic Name
â”‚   â”œâ”€â”€ Context
â”‚   â”œâ”€â”€ Pattern/Solution
â”‚   â”œâ”€â”€ Rationale
â”‚   â””â”€â”€ Added Date
â”œâ”€â”€ Optional Fields
â”‚   â”œâ”€â”€ Examples
â”‚   â””â”€â”€ References
â””â”€â”€ Metadata
    â”œâ”€â”€ Version
    â”œâ”€â”€ Status
    â””â”€â”€ Dependencies
```

### Content Quality

1. **Topic Names**
   - Must be unique
   - Clear and descriptive
   - Follow naming convention
   - Maximum 50 characters

2. **Context Field**
   - Clear scope definition
   - Specific use cases
   - Relevant constraints
   - Implementation context

3. **Pattern/Solution**
   - Clear implementation steps
   - Code examples if applicable
   - Error handling
   - Edge cases

4. **Rationale**
   - Clear justification
   - Trade-off analysis
   - Alternative considerations
   - Future implications

## Memory Organization

### Category Validation

```mermaid
Category Structure
â”œâ”€â”€ Project Overview
â”‚   â””â”€â”€ Must include core decisions
â”œâ”€â”€ Code Patterns
â”‚   â””â”€â”€ Must have examples
â”œâ”€â”€ Technical Debt
â”‚   â””â”€â”€ Must have priority
â””â”€â”€ Development Workflow
    â””â”€â”€ Must be current
```

### Cross-References

1. **Internal Links**
   - Must be valid
   - Must use correct format
   - Must reference existing entries
   - Must maintain hierarchy

2. **Code References**
   - Must use correct format (```startLine:endLine:filepath)
   - Must reference existing files
   - Must be up to date
   - Must include context

## Memory Maintenance

### Validation Schedule

```mermaid
Maintenance Flow
â”œâ”€â”€ Daily
â”‚   â””â”€â”€ New entry validation
â”œâ”€â”€ Weekly
â”‚   â””â”€â”€ Reference checks
â”œâ”€â”€ Monthly
â”‚   â””â”€â”€ Content review
â””â”€â”€ Quarterly
    â””â”€â”€ Full audit
```

### Quality Metrics

1. **Completeness**
   - All required fields present
   - Sufficient detail level
   - Clear examples
   - Proper references

2. **Accuracy**
   - Current information
   - Verified examples
   - Valid references
   - Tested solutions

3. **Relevance**
   - Active usage
   - Current technology
   - Project alignment
   - Business value

## Memory Conflict Resolution

### Conflict Types

1. **Content Conflicts**
   - Contradicting patterns
   - Overlapping solutions
   - Inconsistent rationales
   - Different approaches

2. **Version Conflicts**
   - Outdated information
   - Superseded patterns
   - Legacy references
   - Deprecated solutions

### Resolution Process

```mermaid
Conflict Resolution
â”œâ”€â”€ Identification
â”‚   â”œâ”€â”€ Detect conflicts
â”‚   â””â”€â”€ Assess impact
â”œâ”€â”€ Analysis
â”‚   â”œâ”€â”€ Compare versions
â”‚   â””â”€â”€ Evaluate context
â”œâ”€â”€ Resolution
â”‚   â”œâ”€â”€ Choose solution
â”‚   â””â”€â”€ Update entries
â””â”€â”€ Validation
    â”œâ”€â”€ Verify changes
    â””â”€â”€ Update references
```

## Memory Cleanup

### Cleanup Criteria

1. **Outdated Entries**
   - Older than 6 months
   - Deprecated technology
   - Changed patterns
   - Invalid references

2. **Redundant Entries**
   - Duplicate information
   - Merged patterns
   - Consolidated solutions
   - Obsolete approaches

### Cleanup Process

```mermaid
Cleanup Flow
â”œâ”€â”€ Identify
â”‚   â”œâ”€â”€ Age check
â”‚   â”œâ”€â”€ Usage analysis
â”‚   â””â”€â”€ Relevance check
â”œâ”€â”€ Review
â”‚   â”œâ”€â”€ Impact assessment
â”‚   â”œâ”€â”€ Dependency check
â”‚   â””â”€â”€ Value evaluation
â”œâ”€â”€ Action
â”‚   â”œâ”€â”€ Archive
â”‚   â”œâ”€â”€ Update
â”‚   â”œâ”€â”€ Merge
â”‚   â””â”€â”€ Delete
â””â”€â”€ Validate
    â”œâ”€â”€ Reference integrity
    â”œâ”€â”€ Documentation
    â””â”€â”€ Consistency
```

## Validation Reports

### Report Format

```typescript
type MemoryValidationReport = {
  timestamp: string
  status: 'valid' | 'invalid' | 'warning'
  entries: {
    total: number
    valid: number
    invalid: number
    warnings: number
  }
  issues: Array<{
    type: 'error' | 'warning'
    entry: string
    message: string
    suggestion?: string
  }>
  metrics: {
    completeness: number
    accuracy: number
    relevance: number
    maintenance: number
  }
}
```

### Report Actions

1. **Automated Actions**
   - Format corrections
   - Reference updates
   - Date validations
   - Structure fixes

2. **Manual Review**
   - Content accuracy
   - Pattern relevance
   - Conflict resolution
   - Strategic decisions

> ðŸ’¡ **Note**: These validation rules ensure the quality and reliability of the memory system. Regular validation and maintenance are crucial for keeping the memory system valuable and effective.
